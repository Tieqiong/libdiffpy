Import('env')

# Define Custom configure checks ---------------------------------------------

def CheckBoostVersion(context, version):
    '''Check if Boost Library is at least of specified version
    '''
    # Boost versions are in format major.minor.subminor
    v_arr = [int(n) for n in version.split(".")]
    version_n = sum([(v * n) for v, n in zip(v_arr, (1e5, 1e2, 1))])
    context.Message('Checking for Boost version >= %s... ' % (version))
    rv = context.TryCompile('\n'.join([
        '#include <boost/version.hpp>',
        '#if BOOST_VERSION < %d',
        '#error Installed boost is too old!',
        '#endif',
        'int main() { return 0; }',
        '', ]) % version_n, '.cpp')
    context.Result(rv)
    return rv

def CheckBoostSerialization(context):
    context.Message('Checking for boost_serialization... ')
    test_code = '''
        #include <boost/serialization/serialization.hpp>
        int main() { return 0; }
    '''
    rv = context.TryCompile(test_code, '.cpp')
    context.Result(rv)
    return rv

# Helper functions -----------------------------------------------------------

boostlibtags = ['', '-mt']
def configure_boost_library(libname):
    '''Add a boost library to the configured environment allowing for any
    of the boostlibtags name extensions.

    libname  -- boost library name without any extension

    Note: CheckLib function automatically adds library to the environment.
    '''
    # using global conf defined below
    for t in boostlibtags:
        libnamefull = libname + t
        if conf.CheckLib(libnamefull, language='C++'):
            boostlibtags[:] = [t]
            return
    # library not found here
    print('This program requires %r library' % libname)
    Exit(1)


# Start configuration --------------------------------------------------------

conf = Configure(env, custom_tests={
    'CheckBoostVersion' : CheckBoostVersion,
    'CheckBoostSerialization': CheckBoostSerialization
    })

# serialization of unordered_map requires boost 1.56.0
boost_required = '1.56.0'
if not conf.CheckBoostVersion(boost_required):
    print('This software requires Boost %s or later.' % boost_required)
    Exit(1)

if not conf.CheckBoostSerialization():
    print('Boost.Serialization library not found!')
    Exit(1)

# ObjCryst - assume a no-objcryst fallback configuration.
conf.env['has_objcryst'] = False
# Detect ObjCryst and exit with error if requested and not found.
# By default conf.env does not contain the 'enable_objcryst' key.
if conf.env.get('enable_objcryst', True):
    conf.env['has_objcryst'] = conf.CheckLibWithHeader(
        'ObjCryst', 'ObjCryst/ObjCryst/Crystal.h',
        language='C++', autoadd=True)
    objcryst_requested = conf.env.get('enable_objcryst', False)
    if objcryst_requested and not conf.env['has_objcryst']:
        print("Adjust compiler paths or build with 'enable_objcryst=False'.")
        Exit(1)

env = conf.Finish()

# vim: ft=python
