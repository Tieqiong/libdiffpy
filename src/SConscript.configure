Import('env')

# Define Custom configure checks ---------------------------------------------

def CheckBoostVersion(context, version):
    '''Check if Boost Library is at least of specified version
    '''
    # Boost versions are in format major.minor.subminor
    v_arr = [int(n) for n in version.split(".")]
    version_n = sum([(v * n) for v, n in zip(v_arr, (1e5, 1e2, 1))])
    context.Message('Checking for Boost version >= %s... ' % (version))
    rv = context.TryCompile('\n'.join([
        '#include <boost/version.hpp>',
        '#if BOOST_VERSION < %d',
        '#error Installed boost is too old!',
        '#endif',
        'int main() { return 0; }',
        '', ]) % version_n, '.cpp')
    context.Result(rv)
    return rv


# Start configuration --------------------------------------------------------

conf = Configure(env, custom_tests={
    'CheckBoostVersion' : CheckBoostVersion,
    })

# Add Conda include and library paths
import os
conda_prefix = Environment(ENV=os.environ)['ENV'].get('CONDA_PREFIX')
if conda_prefix:
    env.Append(CPPPATH=[os.path.join(conda_prefix, 'include')])
    env.Append(LIBPATH=[os.path.join(conda_prefix, 'lib')])

# serialization of unordered_map requires boost 1.56.0
boost_required = '1.56.0'
if not conf.CheckBoostVersion(boost_required):
    print('This software requires Boost %s or later.' % boost_required)
    Exit(1)


# ObjCryst - assume a no-objcryst fallback configuration.
conf.env['has_objcryst'] = False
# Detect ObjCryst and exit with error if requested and not found.
# By default conf.env does not contain the 'enable_objcryst' key.
if conf.env.get('enable_objcryst', True):
    conf.env['has_objcryst'] = conf.CheckLibWithHeader(
        'ObjCryst', 'ObjCryst/ObjCryst/Crystal.h',
        language='C++', autoadd=True)
    objcryst_requested = conf.env.get('enable_objcryst', False)
    if objcryst_requested and not conf.env['has_objcryst']:
        print("Adjust compiler paths or build with 'enable_objcryst=False'.")
        Exit(1)

env = conf.Finish()

# vim: ft=python
