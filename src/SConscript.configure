Import('env')

# Define Custom configure checks ---------------------------------------------

def CheckBoostVersion(context, version):
    '''Check if Boost Library is at least of specified version
    '''
    # Boost versions are in format major.minor.subminor
    v_arr = [int(n) for n in version.split(".")]
    version_n = sum([(v * n) for v, n in zip(v_arr, (1e5, 1e2, 1))])
    context.Message('Checking for Boost version >= %s... ' % (version))
    rv = context.TryCompile('\n'.join([
        '#include <boost/version.hpp>',
        '#if BOOST_VERSION < %d',
        '#error Installed boost is too old!',
        '#endif',
        'int main() { return 0; }',
        '', ]) % version_n, '.cpp')
    context.Result(rv)
    return rv

def CheckObjCrystVersion(context, version):
    '''Check if ObjCryst Library is at least of specified version
    '''
    # Boost versions are in format major.minor.subminor
    v_arr = [int(n) for n in version.split(".")]
    version_n = str(int(sum([(v * n) for v, n in zip(v_arr, (1e9, 1e6, 1e3))])))+"LL"
    context.Message('Checking for ObjCryst version >= %s... ' % (version))
    rv = context.TryCompile('\n'.join([
        '#include <ObjCryst/version.h>',
        '#if LIBOBJCRYST_VERSION < %s',
        '#error Installed ObjCryst is too old!',
        '#endif',
        'int main() { return 0; }',
        '', ]) % version_n, '.cpp')
    context.Result(rv)
    return rv

# Start configuration --------------------------------------------------------

conf = Configure(env, custom_tests={
    'CheckBoostVersion' : CheckBoostVersion,
    'CheckObjCrystVersion' : CheckObjCrystVersion,
    })

# serialization of unordered_map requires boost 1.56.0
boost_required = '1.56.0'
if not conf.CheckBoostVersion(boost_required):
    print('This software requires Boost %s or later.' % boost_required)
    Exit(1)

# Check for ObjCryst library
if conf.env.get('enable_objcryst', True):
    if not conf.CheckObjCrystVersion('2017.2.1'):
        print('ObjCryst library not found. Please install it or disable it.')
        Exit(1)
    else:
        conf.env['has_objcryst'] = True
else:
    conf.env['has_objcryst'] = False

env = conf.Finish()

# vim: ft=python
